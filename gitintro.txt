## Git command for ComputerVision V2
>> git init
>> git clone https://SEW-TataPower@dev.azure.com/SEW-TataPower/ComputerVision/_git/ComputerVision_V2   ##if clone from main branch
>> git clone https://SEW-TataPower@dev.azure.com/SEW-TataPower/ComputerVision/_git/ComputerVision_V2 --branch develop  ## clone from branch

# Paste your desired folder into the cloned folder
>> git add .
>> git status # checking the status for current folder
>> git commit -m "upload new code in repo"
>> git push -u origin master  #push current repo in master
>> git push origin develop  ## push in branch

>>another some time again need to do exeuction then this process will follow
git init
git add . 
git remote add origin https://github.com/anil-phd/LearningPandas.git  #again connection
git remote -v
git status
git push origin master # push in branch

and pull all new updation in loca
git pull


#Executing git init creates a .git subdirectory in the current working directory, 
which contains all of the necessary Git metadata for the new repository.

1. Find your repository. (Pick the folder you think it's in, and run "ls -a". If you see ".git", you're probably in the right place.
	1.1. If you do not have the repository initilized yet, do one of the following:
		1.1.1 If you have all the files copied from the repository, all you need to do is "git init".
		1.2.1 If you have nothing, run "git clone <https://something/foo/bar.git> <folder you want the repository to be in>". If you specify 		      nothing for the folder, it will create it in the current folder.
2. Create a branch: You can use a single command instead of the two commands you have in your question: "git checkout -b <your branch name>"
3. Make some changes in the files.
4. Track your changes: "git add <changed file> [<another changed file> [...]]" :Note: that a changed file can be a folder.
	4.1 If you deleted a file, use "git rm <file>" so Git knows you deleted it.
5. Commit your changes: "git commit -m "what you did" "
6. If you need to push your changes back to the main branch, use "git checkout master" and "git merge <your branch name>". This will move all commits on your new branch to the original branch.
7. Push your changes to the online repository: "git push"
	7.1 For your first time pushing any branch, use this instead: "git push --set-upstream <https://something/foo/bar.git> <your branch name>"
	7.2 From now on, you can incorporate changes from the online branch to your local by using "git pull".
	7.3 If changes are made on master that should be in your branch, checkout your branch and use "git rebase master".
